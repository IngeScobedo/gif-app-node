{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","hooks/useFetchGifs.js","components/GifGridItem.js","components/GifGrid.js","GifApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","resetInput","onSubmit","e","preventDefault","category","type","value","onChange","nValue","target","onClick","getGifs","a","url","encodeURI","fetch","res","json","data","gifs","map","id","title","images","titleN","indexOf","substring","downsized_medium","useFetchGifs","loading","state","setState","useEffect","then","imgs","GifGridItem","className","src","alt","GifGrid","img","GifApp","categories","ReactDOM","render","document","getElementById"],"mappings":"sSAkCeA,EA9BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAClB,EAAoCC,mBAAS,aAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAYMC,EAAa,WACfD,EAAc,KAElB,OACI,sBAAME,SAVW,SAACC,GAClBA,EAAEC,iBAEFP,GAAc,SAAAQ,GAAQ,OAAIN,GAAJ,mBAAmBM,OACzCJ,KAMA,SACE,uBACEK,KAAK,OACLC,MAAOR,EACPS,SAnBgB,SAACL,GAErB,IAAIM,EAASN,EAAEO,OAAOH,MACtBP,EAAcS,IAiBVE,QAASV,O,+BCRNW,EAlBF,uCAAG,WAAOP,GAAP,uBAAAQ,EAAA,6DACRC,EADQ,0FACiFC,UAC7FV,GAFY,8BAIEW,MAAMF,GAJR,cAIVG,EAJU,gBAKOA,EAAIC,OALX,uBAKRC,EALQ,EAKRA,KACFC,EAAOD,EAAKE,KAAI,YAA4B,IAAzBC,EAAwB,EAAxBA,GAAIC,EAAoB,EAApBA,MAAOC,EAAa,EAAbA,OAC5BC,EAASF,EAAMG,QAAQ,KAE3B,MAAO,CACLJ,KACAC,MAHaA,EAAMI,UAAU,EAAGF,GAIhCX,IAAG,OAAEU,QAAF,IAAEA,OAAF,EAAEA,EAAQI,iBAAiBd,QAZpB,kBAePM,GAfO,4CAAH,sDCoBES,EAlBM,SAACxB,GAGlB,MAA0BP,mBAAS,CAC/BqB,KAAM,GACNW,SAAQ,IAFZ,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OATAC,qBAAU,WACNrB,EAAQP,GACP6B,MAAK,SAAAC,GACFH,EAAS,CACLb,KAAMgB,EACNL,SAAS,SAGhB,CAACzB,IACC0B,GCHIK,G,YAZK,SAAC,GAAuB,EAArBd,GAAsB,IAAlBC,EAAiB,EAAjBA,MAAOT,EAAU,EAAVA,IAC9B,OACI,sBAAKuB,UAAU,iDAAf,UACI,qBACIC,IAAKxB,EACLyB,IAAKhB,EACLc,UAAU,mBAEd,mBAAGA,UAAU,YAAb,SAA0Bd,SCLzBiB,EAAU,SAAC,GAAkB,IAAhBnC,EAAe,EAAfA,SACxB,EAAgCwB,EAAaxB,GAAjCmB,EAAZ,EAAML,KAAcW,EAApB,EAAoBA,QAEpB,OACE,qCACE,6BAAKzB,IACJyB,GAAW,aAEZ,qBAAKO,UAAU,WAAf,SACGb,EAAOH,KAAI,SAACoB,GAAD,OACV,cAAC,EAAD,eAA8BA,GAAZA,EAAInB,a,MCWjBoB,MAtBf,WACE,MAAoC5C,mBAAS,IAA7C,mBAAO6C,EAAP,KAAmB9C,EAAnB,KAEA,OACE,sBAAKwC,UAAU,UAAf,UACE,oBAAIA,UAAU,YAAd,oBACA,cAAC,EAAD,CAAaxC,cAAeA,IAC5B,uBACA,6BAEI8C,EAAWtB,KAAI,SAAAhB,GAAQ,OACvB,cAAC,EAAD,CACEA,SAAUA,GACLA,YCbjBuC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.82b2c242.chunk.js","sourcesContent":["import  {useState} from 'react'\nimport PropTypes from 'prop-types';\nimport './AddCategory.css'\n\nconst AddCategory = ({setCategories}) => {\n    const [inputValue, setInputValue] = useState('Search...')\n    let handleInputChange = (e) => {\n\n        let nValue = e.target.value\n        setInputValue(nValue)\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault();\n        //setCategories((categories) => [...categories, nValue])\n        setCategories(category =>[inputValue, ...category ])\n        resetInput()\n    }\n    const resetInput = () => {\n        setInputValue('')\n    }\n    return (\n        <form onSubmit={handleSubmit}>\n          <input\n            type='text'\n            value={inputValue}\n            onChange={handleInputChange}\n            onClick={resetInput}\n          />\n        </form>\n    )\n}\nAddCategory.propTypes= {\n    setCategories: PropTypes.func.isRequired,\n}\nexport default AddCategory\n","const getGifs = async (category) => {\n  const url = `https://api.giphy.com/v1/gifs/search?api_key=iA39iJnWzk5bUHe4cgfuJC9ZT6RniYOf&q=${encodeURI(\n    category\n  )}&limit=5&rating=r`;\n  let res = await fetch(url);\n  let { data } = await res.json();\n  let gifs = data.map(({ id, title, images }) => {\n    let titleN = title.indexOf(\" \");\n    let newTitle = title.substring(0, titleN);\n    return {\n      id,\n      title: newTitle,\n      url: images?.downsized_medium.url,\n    };\n  });\n  return gifs;\n};\n\nexport default getGifs;\n","import {useState, useEffect} from 'react'\nimport getGifs from '../helpers/getGifs'\nconst useFetchGifs = (category) => {\n    \n    \n    const [state, setState] = useState({\n        data: [],\n        loading:true\n    })\n    useEffect(() => {\n        getGifs(category)\n        .then(imgs => {\n            setState({\n                data: imgs,\n                loading: false\n            })\n        } );\n      }, [category]);\n    return state;\n}\nexport default useFetchGifs","import React from 'react'\nimport './GifGridItem.css'\n\nconst GifGridItem = ({ id, title, url }) => {\n    return (\n        <div className=\"gif-card animate__animated animate__backInDown\" >\n            <img \n                src={url} \n                alt={title}\n                className=\"gif-card-image\"\n                />\n            <p className='gif-title'>{title}</p>\n        </div>\n    )\n}\nexport default GifGridItem","import React from \"react\";\n//import { GifGridItem } from \"./GifGridItem\";\n// import getGifs from \"../helpers/getGifs.js\"\nimport useFetchGifs from \"../hooks/useFetchGifs\";\nimport \"./GifGrid.css\";\nimport GifGridItem from \"./GifGridItem\";\nexport const GifGrid = ({ category }) => {\n  let { data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h1>{category}</h1>\n      {loading && \"Loading...\"}\n\n      <div className=\"gif-grid\">\n        {images.map((img) => (\n          <GifGridItem key={img.id} {...img} />\n        ))}\n      </div>\n    </>\n  );\n};\n","import {useState} from 'react'\nimport AddCategory from './components/AddCategory';\nimport { GifGrid } from './components/GifGrid';\nimport \"./GifApp.css\";\n\nfunction GifApp() {\n  const [categories, setCategories] = useState([]);\n\n  return (\n    <div className=\"gif-app\">\n      <h2 className=\"title-app\">GifApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr></hr>\n      <ol>\n          {\n          categories.map(category => (\n          <GifGrid \n            category={category}\n            key={category}\n            />\n          ))\n          }\n      </ol>\n    </div>\n  );\n}\n\nexport default GifApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifApp from './GifApp';\n\nReactDOM.render(\n    <GifApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}